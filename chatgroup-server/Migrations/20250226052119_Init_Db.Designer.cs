// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chatgroup_server.Data;

#nullable disable

namespace chatgroup_server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250226052119_Init_Db")]
    partial class Init_Db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("chatgroup_server.Models.Files", b =>
                {
                    b.Property<int>("MaFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaFile"));

                    b.Property<string>("DuongDan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KichThuocFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoaiFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("MaFile");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("chatgroup_server.Models.Friends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("chatgroup_server.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupDetail", b =>
                {
                    b.Property<int>("GroupDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupDetailId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupDetailId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupDetails");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessageFile", b =>
                {
                    b.Property<int>("GroupMessageFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMessageFileId"));

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("GroupedMessageId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("GroupMessageFileId");

                    b.HasIndex("FileId");

                    b.HasIndex("GroupedMessageId");

                    b.ToTable("GroupMessageFiles");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessageReaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("GroupedMessageId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReactionId");

                    b.HasIndex("GroupedMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMessageReactions");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessageStatus", b =>
                {
                    b.Property<int>("GroupMessageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMessageStatusId"));

                    b.Property<int>("GroupMessageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.HasKey("GroupMessageStatusId");

                    b.HasIndex("GroupMessageId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("GroupMessageStatuses");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessages", b =>
                {
                    b.Property<int>("GroupedMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupedMessageId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("GroupedMessageId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("GroupMessages");
                });

            modelBuilder.Entity("chatgroup_server.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessageFile", b =>
                {
                    b.Property<int>("UserMessageFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMessageFileId"));

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserMessageId")
                        .HasColumnType("int");

                    b.HasKey("UserMessageFileId");

                    b.HasIndex("FileId");

                    b.HasIndex("UserMessageId");

                    b.ToTable("UserMessageFiles");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessageReaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("ReactionCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserMessageId")
                        .HasColumnType("int");

                    b.HasKey("ReactionId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserMessageId");

                    b.ToTable("UserMessageReactions");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessageStatus", b =>
                {
                    b.Property<int>("UserMessageStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMessageStatusId"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("UserMessageId")
                        .HasColumnType("int");

                    b.HasKey("UserMessageStatusId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserMessageId");

                    b.ToTable("UserMessageStatuses");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessages", b =>
                {
                    b.Property<int>("UserMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMessageId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserMessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("chatgroup_server.Models.Friends", b =>
                {
                    b.HasOne("chatgroup_server.Models.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupDetail", b =>
                {
                    b.HasOne("chatgroup_server.Models.Group", "Group")
                        .WithMany("groupDetail")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.User", "User")
                        .WithMany("groupDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessageFile", b =>
                {
                    b.HasOne("chatgroup_server.Models.Files", "File")
                        .WithMany("groupMessageFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.GroupMessages", "groupMessage")
                        .WithMany("groupMessageFiles")
                        .HasForeignKey("GroupedMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessageReaction", b =>
                {
                    b.HasOne("chatgroup_server.Models.GroupMessages", "groupMessages")
                        .WithMany("groupMessageReactions")
                        .HasForeignKey("GroupedMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.User", "User")
                        .WithMany("groupMessageReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("groupMessages");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessageStatus", b =>
                {
                    b.HasOne("chatgroup_server.Models.GroupMessages", "GroupMessage")
                        .WithMany("groupMessageStatuses")
                        .HasForeignKey("GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.User", "Receiver")
                        .WithMany("groupMessageStatuses")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupMessage");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessages", b =>
                {
                    b.HasOne("chatgroup_server.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.User", "Sender")
                        .WithMany("SentGroupMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessageFile", b =>
                {
                    b.HasOne("chatgroup_server.Models.Files", "File")
                        .WithMany("userMessageFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.UserMessages", "userMessage")
                        .WithMany("userMessageFiles")
                        .HasForeignKey("UserMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("userMessage");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessageReaction", b =>
                {
                    b.HasOne("chatgroup_server.Models.User", "User")
                        .WithMany("userMessageReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.UserMessages", "userMessages")
                        .WithMany("userMessageReactions")
                        .HasForeignKey("UserMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("userMessages");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessageStatus", b =>
                {
                    b.HasOne("chatgroup_server.Models.User", "Receiver")
                        .WithMany("userMessageStatuses")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.UserMessages", "Message")
                        .WithMany("userMessageStatuses")
                        .HasForeignKey("UserMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessages", b =>
                {
                    b.HasOne("chatgroup_server.Models.User", "Receiver")
                        .WithMany("Receivers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chatgroup_server.Models.User", "Sender")
                        .WithMany("Senders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("chatgroup_server.Models.Files", b =>
                {
                    b.Navigation("groupMessageFiles");

                    b.Navigation("userMessageFiles");
                });

            modelBuilder.Entity("chatgroup_server.Models.Group", b =>
                {
                    b.Navigation("groupDetail");
                });

            modelBuilder.Entity("chatgroup_server.Models.GroupMessages", b =>
                {
                    b.Navigation("groupMessageFiles");

                    b.Navigation("groupMessageReactions");

                    b.Navigation("groupMessageStatuses");
                });

            modelBuilder.Entity("chatgroup_server.Models.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Receivers");

                    b.Navigation("Senders");

                    b.Navigation("SentGroupMessages");

                    b.Navigation("groupDetails");

                    b.Navigation("groupMessageReactions");

                    b.Navigation("groupMessageStatuses");

                    b.Navigation("userMessageReactions");

                    b.Navigation("userMessageStatuses");
                });

            modelBuilder.Entity("chatgroup_server.Models.UserMessages", b =>
                {
                    b.Navigation("userMessageFiles");

                    b.Navigation("userMessageReactions");

                    b.Navigation("userMessageStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
